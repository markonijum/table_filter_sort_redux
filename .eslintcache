[{"/Users/markodudic/Desktop/table_sort_redux/src/index.js":"1","/Users/markodudic/Desktop/table_sort_redux/src/App.js":"2","/Users/markodudic/Desktop/table_sort_redux/src/serviceWorker.js":"3","/Users/markodudic/Desktop/table_sort_redux/src/app/store.js":"4","/Users/markodudic/Desktop/table_sort_redux/src/components/tableList/TableList.js":"5","/Users/markodudic/Desktop/table_sort_redux/src/components/tableList/tableListSlice.js":"6","/Users/markodudic/Desktop/table_sort_redux/src/components/tableFilter/tableFilterSlice.js":"7","/Users/markodudic/Desktop/table_sort_redux/src/components/tableFilter/TableFilter.js":"8","/Users/markodudic/Desktop/table_sort_redux/src/components/tablePaginator/TablePaginator.js":"9","/Users/markodudic/Desktop/table_sort_redux/src/components/tablePaginator/tablePaginatorSlice.js":"10","/Users/markodudic/Desktop/table_sort_redux/src/components/tableSortHead/TableSortHead.js":"11","/Users/markodudic/Desktop/table_sort_redux/src/utils.js":"12"},{"size":660,"mtime":1612375189271,"results":"13","hashOfConfig":"14"},{"size":1202,"mtime":1612639645596,"results":"15","hashOfConfig":"14"},{"size":5141,"mtime":1612355207586,"results":"16","hashOfConfig":"14"},{"size":459,"mtime":1612387717442,"results":"17","hashOfConfig":"14"},{"size":2631,"mtime":1612636421685,"results":"18","hashOfConfig":"14"},{"size":6344,"mtime":1612639730848,"results":"19","hashOfConfig":"14"},{"size":2072,"mtime":1612638186928,"results":"20","hashOfConfig":"14"},{"size":8436,"mtime":1612641695845,"results":"21","hashOfConfig":"14"},{"size":5134,"mtime":1612642884524,"results":"22","hashOfConfig":"14"},{"size":2873,"mtime":1612551106008,"results":"23","hashOfConfig":"14"},{"size":1750,"mtime":1612638821273,"results":"24","hashOfConfig":"14"},{"size":182,"mtime":1612543992760,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1w0309j",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/markodudic/Desktop/table_sort_redux/src/index.js",[],["53","54"],"/Users/markodudic/Desktop/table_sort_redux/src/App.js",[],"/Users/markodudic/Desktop/table_sort_redux/src/serviceWorker.js",[],"/Users/markodudic/Desktop/table_sort_redux/src/app/store.js",[],"/Users/markodudic/Desktop/table_sort_redux/src/components/tableList/TableList.js",[],"/Users/markodudic/Desktop/table_sort_redux/src/components/tableList/tableListSlice.js",["55"],"import { createSlice } from '@reduxjs/toolkit';\nimport { createSelector } from 'reselect'\nimport axios from \"axios\"\nimport currency from \"currency.js\"\nimport {\n    setFilters,\n    setMaxBalance,\n    selectActiveFilters,\n    selectSortBy,\n} from \"../tableFilter/tableFilterSlice\"\nimport { selectOffset, selectCurrentPage } from \"../tablePaginator/tablePaginatorSlice\";\n\nexport const tableListSlice = createSlice({\n    name: 'tableList',\n    initialState: {\n        list: [],\n        loading: true,\n        failed: ''\n    },\n    reducers: {\n        loadDataList: (state, action) => {\n            // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n            // doesn't actually mutate the state because it uses the Immer library,\n            // which detects changes to a \"draft state\" and produces a brand new\n            // immutable state based off those changes\n            state.list = action.payload\n        },\n        loading: state => {\n            state.loading = !state.loading;\n        },\n        failed: (state, action) => {\n            state.failed += action.payload;\n        },\n    },\n});\n\nexport const { loadDataList, loading, failed } = tableListSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const fetchDataListAsync = () => async dispatch => {\n    try {\n        const response = await axios.get(\"https://fww-demo.herokuapp.com/\");\n        const countries = []\n        const states = []\n        const registered = []\n        const balances = []\n        let rows = []\n\n        let dateOptions = { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' };\n        response.data.forEach((bycountry => {\n\n            const country = bycountry.country\n            countries.push(country)\n            bycountry.state.forEach(bystate => {\n                const state = bystate.name\n                states.push(state)\n                bystate.users.forEach((byuser) => {\n                    const date = new Date(byuser.registered)\n                    balances.push(currency(byuser.balance).value)\n                    registered.push(date.getFullYear())\n                    rows = [...rows, { state: state, country: country, ...byuser, registered: date.toLocaleString('en-US', dateOptions) }]\n                })\n            })\n        }))\n        dispatch(loadDataList(rows))\n        const sorted_countries = countries.sort()\n        const distinct_states = states.filter((state, index) => states.indexOf(state) === index).sort()\n        const sorted_years = registered.sort()\n        const distinct_years = sorted_years.filter((year, index) => sorted_years.indexOf(year) === index )\n        dispatch(setFilters([\n            {\n                name: 'country',\n                value: sorted_countries\n            },\n            {\n                name: 'state',\n                value: distinct_states\n            },\n            {\n                name: 'registered',\n                value: distinct_years\n            },\n        ]))\n        dispatch(setMaxBalance(Math.ceil(Math.max(...balances))))\n        dispatch(loading())\n    }catch (err) {\n        dispatch(loading())\n        dispatch(failed(err.message))\n    }\n\n};\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectList = state => state.tableList.list;\nexport const selectColumns = state => state.tableList.columns\nexport const selectLoading = state => state.tableList.loading\nexport const selectFaild = state => state.tableList.failed\nexport const selectFilteredList = createSelector(\n    selectList,\n    selectActiveFilters,\n    (list, activeFilters) => {\n        let acc = list\n        if(activeFilters.length > 0) {\n            activeFilters.forEach(activeFilter => {\n                acc = acc.filter( row => {\n                    if(typeof row[activeFilter.name] === 'string') {\n                        if(typeof activeFilter.value === 'string'){\n                            return row[activeFilter.name].indexOf(activeFilter.value) > - 1\n                        }else if(typeof activeFilter.value === 'object' && activeFilter.value.hasOwnProperty('start')){\n                            return currency(row[activeFilter.name]).subtract(activeFilter.value.start).value >= 0 &&  currency(activeFilter.value.end).subtract(row[activeFilter.name]).value >= 0\n                        }\n                    }else if( typeof row[activeFilter.name] === 'boolean') {\n                        console.log(\"Active inactive\", row[activeFilter.name])\n                        return (row[activeFilter.name] + \"\") === activeFilter.value\n                    }\n                })\n            })\n        }\n        return acc\n    }\n)\nexport const selectSortedFilteredList = createSelector(\n    selectFilteredList,\n    selectSortBy,\n    (filteredList, sortBy) => {\n        if(sortBy.name !== ''){\n            return filteredList.slice().sort((a, b) => {\n                if(sortBy.name === 'registered') {\n                    let d1 = new Date(a[sortBy.name])\n                    let d2 = new Date(b[sortBy.name])\n\n                    return d1.getTime() > d2.getTime() ? ( sortBy.direction === 'ASC' ? 1 : -1) : (a[sortBy.name] === b[sortBy.name] ? (a[\"fullName\"] > b[\"fullName\"] ? 1 : -1 ) : (sortBy.direction === 'ASC' ? -1 : 1))\n                }\n                return a[sortBy.name] > b[sortBy.name] ? ( sortBy.direction === 'ASC' ? 1 : -1) : (a[sortBy.name] === b[sortBy.name] ? (a[\"fullName\"] > b[\"fullName\"] ? 1 : -1 ) : (sortBy.direction === 'ASC' ? -1 : 1))\n            })\n        }\n       return filteredList\n    }\n)\n\nexport const selectSortedFilteredPaginatedList = createSelector(\n    selectSortedFilteredList,\n    selectOffset,\n    selectCurrentPage,\n    (sortedFilteredList, offset, currentPage) => {\n        return sortedFilteredList.slice((currentPage-1)*(currentPage > 1 ? offset : 1), offset * currentPage)\n    }\n)\n\n\nexport default tableListSlice.reducer;\n","/Users/markodudic/Desktop/table_sort_redux/src/components/tableFilter/tableFilterSlice.js",[],"/Users/markodudic/Desktop/table_sort_redux/src/components/tableFilter/TableFilter.js",["56","57"],"import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components'\nimport { RangeSlider } from 'reactrangeslider';\nimport currency from 'currency.js'\nimport { navigate } from \"@reach/router\"\nimport { useSelector, useDispatch} from \"react-redux\";\nimport {\n    selectMaxBalance,\n    selectFilters,\n    setActiveFilters,\n    selectSearching,\n    setSearching\n} from \"./tableFilterSlice\"\n\nimport { selectFilteredList} from \"../tableList/tableListSlice\";\n\nimport { selectCurrentPage } from \"../tablePaginator/tablePaginatorSlice\";\n\nconst currencyStyle = {style: 'currency', currency: 'USD'}\n\nconst TableFilter = styled(({className}) => {\n    const maxBalance = useSelector(selectMaxBalance)\n    const filters = useSelector(selectFilters)\n    const currentPage = useSelector(selectCurrentPage)\n\n    const dispatch = useDispatch()\n\n\n    let countries = []\n    let states = []\n    let years = []\n    filters.forEach(filter => {\n        if(filter.name === 'country'){\n            countries = filter.value\n        }\n        if(filter.name === 'state') {\n            states = filter.value\n        }\n        if(filter.name === 'registered'){\n            years = filter.value\n        }\n    })\n    const searching = useSelector(selectSearching)\n    const [inputFilters, setInputFilters] = useState([])\n    const [balance, setBalance] = useState(\n        {\n            start: Intl.NumberFormat('en-Us', currencyStyle).format(0) ,\n            end: Intl.NumberFormat('en-Us', currencyStyle).format(maxBalance)\n        }\n    )\n    const handleFilterClick = (name, value) => {\n        if(value === '' && inputFilters.find(el => el.name === name)) {\n            setInputFilters(prevState => [...inputFilters.filter(el => el.name !== name)])\n        }else if(value !== '' && inputFilters.find(el => el.name === name)) {\n            setInputFilters([...inputFilters.map(el => {\n                if(el.name === name) {\n                    return {\n                        name,\n                        value\n                    }\n                }\n                return el\n            })])\n        }else {\n            setInputFilters(prevState => {\n                        return [...prevState, {\n                            name: name,\n                            value: value\n                        }]\n                    })\n        }\n    }\n\n\n    const handleClick = async () => {\n        dispatch(setSearching(true))\n        if(currentPage > 1 ) {\n            await navigate('/')\n        }\n        dispatch(setActiveFilters(inputFilters))\n\n        dispatch(setSearching(false))\n    }\n\n    const onRangeChange = (value) => {\n        console.log(value)\n        setBalance({start: Intl.NumberFormat('en-Us', currencyStyle).format(value.start ? value.start : 0), end: Intl.NumberFormat('en-Us', currencyStyle).format(value.end ? value.end : maxBalance)})\n\n        setInputFilters(prevState => {\n            if(prevState.find(el => el.name === 'balance')) {\n                return prevState.map(filter => {\n                    if(filter.name === 'balance') {\n                        return {\n                            name: \"balance\",\n                            value: {\n                                start: (value.start ? Intl.NumberFormat('en-Us', currencyStyle).format(value.start) : Intl.NumberFormat('en-Us', currencyStyle).format(0)),\n                                end : (value.end ? Intl.NumberFormat('en-Us', currencyStyle).format(value.end)  : Intl.NumberFormat('en-Us', currencyStyle).format(maxBalance))\n                            }\n                        }\n                    }\n                    return filter\n                })\n            }\n            return [...prevState, {\n                name: \"balance\",\n                value: {\n                    start: (value.start ? Intl.NumberFormat('en-Us', currencyStyle).format(value.start) : Intl.NumberFormat('en-Us', currencyStyle).format(0)),\n                    end : (value.end ? Intl.NumberFormat('en-Us', currencyStyle).format(value.end)  : Intl.NumberFormat('en-Us', currencyStyle).format(maxBalance))\n                }\n            }]\n        })\n    }\n\n    useEffect(() => {\n        console.log(\"RENDERING FILTER\")\n        setBalance(prevState =>  ({ ...prevState, end : Intl.NumberFormat('en-Us', currencyStyle).format(maxBalance) }))\n    },[maxBalance])\n\n    return (\n        <form onSubmit={e => e.preventDefault() } action=\"#\">\n            <div className={className}>\n\n            <div style={{minWidth:\"150px\"}} className=\"f-name input-field\">\n                <input className=\"form-control\" onChange={(e) => handleFilterClick('fullName', e.target.value)} type=\"text\" name=\"full_name\" placeholder=\"Search by name...\"/>\n            </div>\n            <div className=\"country\">\n                <select className=\"form-select\" onChange={(e) => handleFilterClick('country', e.target.value)} name=\"countries\" id=\"s-countries\">\n                    <option defaultValue value={''}>Country</option>\n                    {countries.map((country, index) => {\n                        return <option key={index} value={country}>{country}</option>\n                    })}\n                </select>\n            </div>\n            <div className=\"state\">\n                <select className=\"form-select\" onChange={(e) => handleFilterClick('state', e.target.value)} name=\"states\" id=\"s-states\">\n                    <option defaultValue value={''}>State</option>\n                    {states.map((state, index) => {\n                        return <option key={index} value={state}>{state}</option>\n                    })}\n                </select>\n            </div>\n            <div className=\"registered\">\n                <select className=\"form-select\" onChange={(e) => handleFilterClick('registered', e.target.value)} name=\"registered\" id=\"s-registered\">\n                    <option defaultValue value={''}>Registered</option>\n                    {years.map((year, index) => {\n                        return <option key={index} value={year}>{year}</option>\n                    })}\n                </select>\n            </div>\n            <div className=\"status\">\n                <select className=\"form-select\" onChange={(e) => handleFilterClick('isActive', e.target.value)} name=\"states\" id=\"s-states\">\n                    <option defaultValue value={''}>Status</option>\n                    <option value={true}>Active</option>\n                    <option value={false}>Inactive</option>\n                </select>\n            </div>\n            <div className=\"balance\">\n                <span>Balance range</span>\n                <RangeSlider\n                    step={100}\n                    min={0}\n                    max={maxBalance}\n                    handleStyle={{height:\"15px\", width:\"15px\"}}\n                    highlightedTrackStyle={{top:\"6px\"}}\n                    wrapperStyle={{height:\"auto\", marginBottom:\"10px\", width:\"100%\"}}\n                    trackStyle={{top:\"6px\"}}\n                    onChange={onRangeChange}\n                />\n                <div style={{display:\"flex\", justifyContent:\"space-between\", alignItems:\"center\"}}>\n                    <span className=\"start\">{balance.start}</span>\n                    <span className=\"end\">{balance.end ? balance.end : Intl.NumberFormat('en-Us', currencyStyle).format(maxBalance) }</span>\n                </div>\n            </div>\n            <div className=\"search-btn\">\n                <button style={{width:\"100%\"}} className=\"btn btn-primary\" onClick={handleClick}>Search</button>\n            </div>\n            {searching && <p style={{width:\"100%\", margin:\"30px 0\"}}>Searching...</p>}\n            {/*{filterMessage !== '' && <p style={{width:\"100%\", margin:\"30px 0\"}}>{filterMessage}</p>}*/}\n        </div>\n</form>\n    );\n})`\ndisplay:flex;\n  width: 100%;\n  flex-wrap:wrap;\n  justify-content: space-between;\n  align-items: center;\n  > div {\n    width:100%;\n    margin-bottom:15px;\n    margin-right:5px;\n    @media screen and (min-width: 768px) {\n      width:24%;\n    }\n    @media screen and (min-width: 1200px) {\n      width:12%;\n    }\n  }\n  .balance {\n    display:flex;\n    flex-direction: column;\n    justify-content: center;\n    span.start, span.end {\n      display:flex;\n      justify-content: center;\n      align-items: center;\n      font-size:13px;\n      padding:2px;\n      color:black;\n    }\n  }\n  .f-name {\n    input {\n      width:100%;\n    }\n  }\n`\n\nexport default TableFilter;","/Users/markodudic/Desktop/table_sort_redux/src/components/tablePaginator/TablePaginator.js",["58","59","60"],"/Users/markodudic/Desktop/table_sort_redux/src/components/tablePaginator/tablePaginatorSlice.js",[],"/Users/markodudic/Desktop/table_sort_redux/src/components/tableSortHead/TableSortHead.js",[],"/Users/markodudic/Desktop/table_sort_redux/src/utils.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":110,"column":39,"nodeType":"67","messageId":"68","endLine":110,"endColumn":41},{"ruleId":"69","severity":1,"message":"70","line":4,"column":8,"nodeType":"71","messageId":"72","endLine":4,"endColumn":16},{"ruleId":"69","severity":1,"message":"73","line":15,"column":10,"nodeType":"71","messageId":"72","endLine":15,"endColumn":28},{"ruleId":"69","severity":1,"message":"74","line":5,"column":10,"nodeType":"71","messageId":"72","endLine":5,"endColumn":20},{"ruleId":"69","severity":1,"message":"75","line":5,"column":22,"nodeType":"71","messageId":"72","endLine":5,"endColumn":28},{"ruleId":"69","severity":1,"message":"76","line":14,"column":5,"nodeType":"71","messageId":"72","endLine":14,"endColumn":19},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-unused-vars","'currency' is defined but never used.","Identifier","unusedVar","'selectFilteredList' is defined but never used.","'GrPrevious' is defined but never used.","'GrNext' is defined but never used.","'setCurrentPage' is defined but never used.","no-global-assign","no-unsafe-negation"]