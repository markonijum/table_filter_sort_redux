[{"/Users/markodudic/Desktop/table_sort_redux/src/index.js":"1","/Users/markodudic/Desktop/table_sort_redux/src/App.js":"2","/Users/markodudic/Desktop/table_sort_redux/src/serviceWorker.js":"3","/Users/markodudic/Desktop/table_sort_redux/src/app/store.js":"4","/Users/markodudic/Desktop/table_sort_redux/src/components/tableList/TableList.js":"5","/Users/markodudic/Desktop/table_sort_redux/src/components/tableList/tableListSlice.js":"6","/Users/markodudic/Desktop/table_sort_redux/src/components/tableFilter/tableFilterSlice.js":"7","/Users/markodudic/Desktop/table_sort_redux/src/components/tableFilter/TableFilter.js":"8","/Users/markodudic/Desktop/table_sort_redux/src/components/tablePaginator/TablePaginator.js":"9","/Users/markodudic/Desktop/table_sort_redux/src/components/tablePaginator/tablePaginatorSlice.js":"10","/Users/markodudic/Desktop/table_sort_redux/src/components/tableSortHead/TableSortHead.js":"11","/Users/markodudic/Desktop/table_sort_redux/src/utils.js":"12"},{"size":660,"mtime":1612375189271,"results":"13","hashOfConfig":"14"},{"size":1202,"mtime":1612639645596,"results":"15","hashOfConfig":"14"},{"size":5141,"mtime":1612355207586,"results":"16","hashOfConfig":"14"},{"size":459,"mtime":1612387717442,"results":"17","hashOfConfig":"14"},{"size":2631,"mtime":1612636421685,"results":"18","hashOfConfig":"14"},{"size":6344,"mtime":1612639730848,"results":"19","hashOfConfig":"14"},{"size":2072,"mtime":1612638186928,"results":"20","hashOfConfig":"14"},{"size":8435,"mtime":1612640511862,"results":"21","hashOfConfig":"14"},{"size":4939,"mtime":1612640663951,"results":"22","hashOfConfig":"14"},{"size":2873,"mtime":1612551106008,"results":"23","hashOfConfig":"14"},{"size":1750,"mtime":1612638821273,"results":"24","hashOfConfig":"14"},{"size":182,"mtime":1612543992760,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1w0309j",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/markodudic/Desktop/table_sort_redux/src/index.js",[],["52","53"],"/Users/markodudic/Desktop/table_sort_redux/src/App.js",[],"/Users/markodudic/Desktop/table_sort_redux/src/serviceWorker.js",[],"/Users/markodudic/Desktop/table_sort_redux/src/app/store.js",[],"/Users/markodudic/Desktop/table_sort_redux/src/components/tableList/TableList.js",[],"/Users/markodudic/Desktop/table_sort_redux/src/components/tableList/tableListSlice.js",["54"],"import { createSlice } from '@reduxjs/toolkit';\nimport { createSelector } from 'reselect'\nimport axios from \"axios\"\nimport currency from \"currency.js\"\nimport {\n    setFilters,\n    setMaxBalance,\n    selectActiveFilters,\n    selectSortBy,\n} from \"../tableFilter/tableFilterSlice\"\nimport { selectOffset, selectCurrentPage } from \"../tablePaginator/tablePaginatorSlice\";\n\nexport const tableListSlice = createSlice({\n    name: 'tableList',\n    initialState: {\n        list: [],\n        loading: true,\n        failed: ''\n    },\n    reducers: {\n        loadDataList: (state, action) => {\n            // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n            // doesn't actually mutate the state because it uses the Immer library,\n            // which detects changes to a \"draft state\" and produces a brand new\n            // immutable state based off those changes\n            state.list = action.payload\n        },\n        loading: state => {\n            state.loading = !state.loading;\n        },\n        failed: (state, action) => {\n            state.failed += action.payload;\n        },\n    },\n});\n\nexport const { loadDataList, loading, failed } = tableListSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const fetchDataListAsync = () => async dispatch => {\n    try {\n        const response = await axios.get(\"https://fww-demo.herokuapp.com/\");\n        const countries = []\n        const states = []\n        const registered = []\n        const balances = []\n        let rows = []\n\n        let dateOptions = { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' };\n        response.data.forEach((bycountry => {\n\n            const country = bycountry.country\n            countries.push(country)\n            bycountry.state.forEach(bystate => {\n                const state = bystate.name\n                states.push(state)\n                bystate.users.forEach((byuser) => {\n                    const date = new Date(byuser.registered)\n                    balances.push(currency(byuser.balance).value)\n                    registered.push(date.getFullYear())\n                    rows = [...rows, { state: state, country: country, ...byuser, registered: date.toLocaleString('en-US', dateOptions) }]\n                })\n            })\n        }))\n        dispatch(loadDataList(rows))\n        const sorted_countries = countries.sort()\n        const distinct_states = states.filter((state, index) => states.indexOf(state) === index).sort()\n        const sorted_years = registered.sort()\n        const distinct_years = sorted_years.filter((year, index) => sorted_years.indexOf(year) === index )\n        dispatch(setFilters([\n            {\n                name: 'country',\n                value: sorted_countries\n            },\n            {\n                name: 'state',\n                value: distinct_states\n            },\n            {\n                name: 'registered',\n                value: distinct_years\n            },\n        ]))\n        dispatch(setMaxBalance(Math.ceil(Math.max(...balances))))\n        dispatch(loading())\n    }catch (err) {\n        dispatch(loading())\n        dispatch(failed(err.message))\n    }\n\n};\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectList = state => state.tableList.list;\nexport const selectColumns = state => state.tableList.columns\nexport const selectLoading = state => state.tableList.loading\nexport const selectFaild = state => state.tableList.failed\nexport const selectFilteredList = createSelector(\n    selectList,\n    selectActiveFilters,\n    (list, activeFilters) => {\n        let acc = list\n        if(activeFilters.length > 0) {\n            activeFilters.forEach(activeFilter => {\n                acc = acc.filter( row => {\n                    if(typeof row[activeFilter.name] === 'string') {\n                        if(typeof activeFilter.value === 'string'){\n                            return row[activeFilter.name].indexOf(activeFilter.value) > - 1\n                        }else if(typeof activeFilter.value === 'object' && activeFilter.value.hasOwnProperty('start')){\n                            return currency(row[activeFilter.name]).subtract(activeFilter.value.start).value >= 0 &&  currency(activeFilter.value.end).subtract(row[activeFilter.name]).value >= 0\n                        }\n                    }else if( typeof row[activeFilter.name] === 'boolean') {\n                        console.log(\"Active inactive\", row[activeFilter.name])\n                        return (row[activeFilter.name] + \"\") === activeFilter.value\n                    }\n                })\n            })\n        }\n        return acc\n    }\n)\nexport const selectSortedFilteredList = createSelector(\n    selectFilteredList,\n    selectSortBy,\n    (filteredList, sortBy) => {\n        if(sortBy.name !== ''){\n            return filteredList.slice().sort((a, b) => {\n                if(sortBy.name === 'registered') {\n                    let d1 = new Date(a[sortBy.name])\n                    let d2 = new Date(b[sortBy.name])\n\n                    return d1.getTime() > d2.getTime() ? ( sortBy.direction === 'ASC' ? 1 : -1) : (a[sortBy.name] === b[sortBy.name] ? (a[\"fullName\"] > b[\"fullName\"] ? 1 : -1 ) : (sortBy.direction === 'ASC' ? -1 : 1))\n                }\n                return a[sortBy.name] > b[sortBy.name] ? ( sortBy.direction === 'ASC' ? 1 : -1) : (a[sortBy.name] === b[sortBy.name] ? (a[\"fullName\"] > b[\"fullName\"] ? 1 : -1 ) : (sortBy.direction === 'ASC' ? -1 : 1))\n            })\n        }\n       return filteredList\n    }\n)\n\nexport const selectSortedFilteredPaginatedList = createSelector(\n    selectSortedFilteredList,\n    selectOffset,\n    selectCurrentPage,\n    (sortedFilteredList, offset, currentPage) => {\n        return sortedFilteredList.slice((currentPage-1)*(currentPage > 1 ? offset : 1), offset * currentPage)\n    }\n)\n\n\nexport default tableListSlice.reducer;\n","/Users/markodudic/Desktop/table_sort_redux/src/components/tableFilter/tableFilterSlice.js",[],"/Users/markodudic/Desktop/table_sort_redux/src/components/tableFilter/TableFilter.js",["55","56"],"/Users/markodudic/Desktop/table_sort_redux/src/components/tablePaginator/TablePaginator.js",["57","58","59"],"/Users/markodudic/Desktop/table_sort_redux/src/components/tablePaginator/tablePaginatorSlice.js",[],"/Users/markodudic/Desktop/table_sort_redux/src/components/tableSortHead/TableSortHead.js",[],"/Users/markodudic/Desktop/table_sort_redux/src/utils.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":110,"column":39,"nodeType":"66","messageId":"67","endLine":110,"endColumn":41},{"ruleId":"68","severity":1,"message":"69","line":4,"column":8,"nodeType":"70","messageId":"71","endLine":4,"endColumn":16},{"ruleId":"68","severity":1,"message":"72","line":15,"column":10,"nodeType":"70","messageId":"71","endLine":15,"endColumn":28},{"ruleId":"68","severity":1,"message":"73","line":5,"column":10,"nodeType":"70","messageId":"71","endLine":5,"endColumn":20},{"ruleId":"68","severity":1,"message":"74","line":5,"column":22,"nodeType":"70","messageId":"71","endLine":5,"endColumn":28},{"ruleId":"68","severity":1,"message":"75","line":14,"column":5,"nodeType":"70","messageId":"71","endLine":14,"endColumn":19},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-unused-vars","'currency' is defined but never used.","Identifier","unusedVar","'selectFilteredList' is defined but never used.","'GrPrevious' is defined but never used.","'GrNext' is defined but never used.","'setCurrentPage' is defined but never used.","no-global-assign","no-unsafe-negation"]